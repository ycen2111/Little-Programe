#ifndef __BSP_MPU6050_H__
#define __BSP_MPU6050_H__

#include "main.h"
#include "stm32f1xx_hal.h"	

//#define MPU_ACCEL_OFFS_REG		0X06	//accel_offs???,??????,????????
//#define MPU_PROD_ID_REG			0X0C	//prod id???,?????????
#define MPU_SELF_TESTX_REG		0X0D	//?????X
#define MPU_SELF_TESTY_REG		0X0E	//?????Y
#define MPU_SELF_TESTZ_REG		0X0F	//?????Z
#define MPU_SELF_TESTA_REG		0X10	//?????A
#define MPU_SAMPLE_RATE_REG		0X19	//???????
#define MPU_CFG_REG			0X1A	//?????
#define MPU_GYRO_CFG_REG		0X1B	//????????
#define MPU_ACCEL_CFG_REG		0X1C	//?????????
#define MPU_MOTION_DET_REG		0X1F	//???????????
#define MPU_FIFO_EN_REG			0X23	//FIFO?????
#define MPU_I2CMST_CTRL_REG		0X24	//IIC???????
#define MPU_I2CSLV0_ADDR_REG	        0X25	//IIC??0???????
#define MPU_I2CSLV0_REG			0X26	//IIC??0???????
#define MPU_I2CSLV0_CTRL_REG	        0X27	//IIC??0?????
#define MPU_I2CSLV1_ADDR_REG	        0X28	//IIC??1???????
#define MPU_I2CSLV1_REG			0X29	//IIC??1???????
#define MPU_I2CSLV1_CTRL_REG	        0X2A	//IIC??1?????
#define MPU_I2CSLV2_ADDR_REG	        0X2B	//IIC??2???????
#define MPU_I2CSLV2_REG			0X2C	//IIC??2???????
#define MPU_I2CSLV2_CTRL_REG	        0X2D	//IIC??2?????
#define MPU_I2CSLV3_ADDR_REG	        0X2E	//IIC??3???????
#define MPU_I2CSLV3_REG			0X2F	//IIC??3???????
#define MPU_I2CSLV3_CTRL_REG	        0X30	//IIC??3?????
#define MPU_I2CSLV4_ADDR_REG	        0X31	//IIC??4???????
#define MPU_I2CSLV4_REG			0X32	//IIC??4???????
#define MPU_I2CSLV4_DO_REG		0X33	//IIC??4??????
#define MPU_I2CSLV4_CTRL_REG	        0X34	//IIC??4?????
#define MPU_I2CSLV4_DI_REG		0X35	//IIC??4??????

#define MPU_I2CMST_STA_REG		0X36	//IIC???????
#define MPU_INTBP_CFG_REG		0X37	//??/???????
#define MPU_INT_EN_REG			0X38	//???????
#define MPU_INT_STA_REG			0X3A	//???????

#define MPU_ACCEL_XOUTH_REG		0X3B	//????,X??8????
#define MPU_ACCEL_XOUTL_REG		0X3C	//????,X??8????
#define MPU_ACCEL_YOUTH_REG		0X3D	//????,Y??8????
#define MPU_ACCEL_YOUTL_REG		0X3E	//????,Y??8????
#define MPU_ACCEL_ZOUTH_REG		0X3F	//????,Z??8????
#define MPU_ACCEL_ZOUTL_REG		0X40	//????,Z??8????

#define MPU_TEMP_OUTH_REG		0X41	//?????????
#define MPU_TEMP_OUTL_REG		0X42	//????8????

#define MPU_GYRO_XOUTH_REG		0X43	//????,X??8????
#define MPU_GYRO_XOUTL_REG		0X44	//????,X??8????
#define MPU_GYRO_YOUTH_REG		0X45	//????,Y??8????
#define MPU_GYRO_YOUTL_REG		0X46	//????,Y??8????
#define MPU_GYRO_ZOUTH_REG		0X47	//????,Z??8????
#define MPU_GYRO_ZOUTL_REG		0X48	//????,Z??8????

#define MPU_I2CSLV0_DO_REG		0X63	//IIC??0?????
#define MPU_I2CSLV1_DO_REG		0X64	//IIC??1?????
#define MPU_I2CSLV2_DO_REG		0X65	//IIC??2?????
#define MPU_I2CSLV3_DO_REG		0X66	//IIC??3?????

#define MPU_I2CMST_DELAY_REG	        0X67	//IIC?????????
#define MPU_SIGPATH_RST_REG		0X68	//?????????
#define MPU_MDETECT_CTRL_REG	        0X69	//?????????
#define MPU_USER_CTRL_REG		0X6A	//???????
#define MPU_PWR_MGMT1_REG		0X6B	//???????1
#define MPU_PWR_MGMT2_REG		0X6C	//???????2 
#define MPU_FIFO_CNTH_REG		0X72	//FIFO????????
#define MPU_FIFO_CNTL_REG		0X73	//FIFO????????
#define MPU_FIFO_RW_REG			0X74	//FIFO?????
#define MPU_DEVICE_ID_REG		0X75	//??ID???,who am i???
 
//??AD0?(9?)??,IIC???0X68(??????).
//???V3.3,?IIC???0X69(??????).
#define MPU_ADDR				0X68


//??MPU6050?AD0?GND,??????????0XD1?0XD0
//            (??AD0?VCC,????????0XD3?0XD2)  
#define MPU_READ    0XD1
#define MPU_WRITE   0XD0

#define RAD_TO_DEG 57.295779513082320876798154814105  // ?????????
#define DEG_TO_RAD 0.01745329251994329576923690768489 // ?????????
#define RESTRICT_PITCH

typedef struct
{
	float Q_angle;
	float Q_bias;
	float R_measure;
	float angle; // Reset the angle
	float bias; // Reset bias
	float P[2][2];
	// Unbiased rate calculated from the rate and the calculated bias - you have to call getAngle to update the rate
	float rate;
} KalmanFilter_t;
 
typedef struct
{
	KalmanFilter_t *pKalmanX;
	KalmanFilter_t *pKalmanY;
	float gyroXangle, gyroYangle; // Angle calculate using the gyro only
	float compAngleX, compAngleY; // Calculated angle using a complementary filter
	float kalAngleX, kalAngleY;  // Calculated angle using a Kalman filter
} KalmanFilterSys_t;

uint8_t MPU_Init(void); 						//???MPU6050
uint8_t MPU_Write_Len(uint8_t reg,uint8_t len,uint8_t *buf);                           //IIC???
uint8_t MPU_Read_Len(uint8_t reg,uint8_t len,uint8_t *buf);                         //IIC??? 
uint8_t MPU_Write_Byte(uint8_t reg,uint8_t data);				//IIC?????
uint8_t MPU_Read_Byte(uint8_t reg);					//IIC?????

uint8_t MPU_Set_Gyro_Fsr(uint8_t fsr);
uint8_t MPU_Set_Accel_Fsr(uint8_t fsr);
uint8_t MPU_Set_LPF(uint16_t lpf);
uint8_t MPU_Set_Rate(uint16_t rate);
uint8_t MPU_Set_Fifo(uint8_t sens);


float MPU_Get_Temperature(void);
uint8_t MPU_Get_Gyroscope(float *gx,float *gy,float *gz);
uint8_t MPU_Get_Accelerometer(short *ax,short *ay,short *az);

KalmanFilterSys_t Get_Kalman_Filter(float roll, float pitch);
void Accel_To_Angle(float *p_roll, float *p_pitch, float accX, float accY, float accZ);
float Kalman_Filter_GetAngle(KalmanFilter_t *pSys, float newAngle, float newRate, float dt);
void Kalman_Fileter_SetAngle(KalmanFilterSys_t *pSys, float roll, float pitch, float gyroXrate, float gyroYrate, float dt);
void Delete_Kalman_Filter(KalmanFilterSys_t **ppSys);

#endif
