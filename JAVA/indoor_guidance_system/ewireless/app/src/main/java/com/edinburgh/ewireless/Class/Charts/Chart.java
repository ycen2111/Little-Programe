package com.edinburgh.ewireless.Class.Charts;

import java.util.ArrayList;
import java.util.List;

import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.view.LineChartView;

/**
 * The Chart class represents a line chart that can display data points with an x and y coordinate.
 * It uses the HelloCharts library for the chart display.
 */
public class Chart {
    private LineChartView chartView;
    List<Line> lines = new ArrayList<Line>();
    List<PointValue> values = new ArrayList<PointValue>();
    LineChartData data;
    Axis axisX, axisY;
    List<AxisValue> axisValuesX, axisValuesY;
    int pointCount = 0;
    float maxX=0, minX=0, maxY=0, minY=0;

    /**
     Constructor for creating a new Chart object
     @param chartView the LineChartView object that displays the chart
     @param color the color of the chart line
     */
    public Chart(LineChartView chartView, int color){
        this.chartView = chartView;
        lines.add(new Line(values).setColor(color)
                .setCubic(true)
                .setHasPoints(false));
        data = new LineChartData();
        data.setLines(lines);

        axisValuesX = new ArrayList<AxisValue>();
        axisX = new Axis().setHasLines(true);
        axisX.setMaxLabelChars(5);
        axisX.setAutoGenerated(true);
        //axisX.setHasSeparationLine(true);

        axisValuesY = new ArrayList<AxisValue>();
        axisY = new Axis().setHasLines(true);
        axisY.setMaxLabelChars(5);
        axisY.setAutoGenerated(true);
    }

    /**
     Add a new value to the chart.
     @param x The x coordinate of the value.
     @param y The y coordinate of the value.
     */
    public void addValue(float x, float y){
        addValueToArray(x, y);
    }
    /**
     Add a new value to the chart.
     @param value The value to be added.
     */
    public void addValue(float value){
        addValueToArray(pointCount, value);
    }

    /**
     * Adds a new data point to the chart with the given x and y values.
     * @param x the x value of the new data point
     * @param y the y value of the new data point
     */
    private void addValueToArray(float x, float y){
        PointValue pointValue = new PointValue();
        pointValue.set(x,y);
        values.add(pointValue);

        checkAxisBoard(x, y);
        setAxis();

        this.pointCount++;
    }

    /**

     Checks if the given x and y values are outside the current maximum and minimum values for the chart's x and y axis.
     If they are, updates the corresponding maximum and minimum values.
     @param x The x value to check
     @param y The y value to check
     */
    private void checkAxisBoard(float x, float y){
        if (x > this.maxX)
            this.maxX = x;
        else if (x < this.minX)
            this.minX = x;

        if (y > this.maxY)
            this.maxY = y;
        else if (y < this.minY)
            this.minY = y;
    }

    /**
     *Clears and sets the x and y axis values for the chart.
     */
    private void setAxis(){
        axisValuesX.clear();
        setAxisX(5);

        axisValuesY.clear();
        if(this.isLeft)
            setIntAxisY(5);
        else
            setFloatAxisY(5);

        chartView.setLineChartData(data);
    }

    /**
     * Sets the X-axis of the chart with a certain number of labels.
     *
     * @param labelNum the number of labels to be displayed on the X-axis
     */
    private void setAxisX(int labelNum){
        int maximum = (int) Math.ceil(maxX);
        int minimum = (int) Math.floor(minX);
        float gapVal = (float)(maximum - minimum) / labelNum;

        for (float value = minimum; value <= maximum; value += gapVal){
            this.axisValuesX.add(new AxisValue((int)value).setLabel(String.valueOf((int)value)));
        }

        this.axisX.setValues(axisValuesX);
    }

    /** Sets the Y-axis labels for integer values.
     @param labelNum The number of labels to display on the Y-axis.
     */
    private void setIntAxisY(int labelNum){
        int maximum = (int) Math.ceil(maxY);
        int minimum = (int) Math.floor(minY);
        float gapVal = (float)(maximum - minimum) / labelNum;

        for (float value = minimum; value <= maximum; value += gapVal){
            this.axisValuesY.add(new AxisValue((int)value).setLabel(String.valueOf((int)value)));
        }

        axisY.setValues(axisValuesY);
    }

    /**
     * Sets the Y-axis labels for a floating point chart.
     * @param labelNum The number of labels to display on the Y-axis.
     */
    private void setFloatAxisY(int labelNum){
        int maximum = (int) Math.ceil(maxY);
        int minimum = (int) Math.floor(minY);
        float gapVal = (float)(maximum - minimum) / labelNum;

        for (float value = minimum; value <= maximum; value += gapVal){
            this.axisValuesY.add(new AxisValue((float)value).setLabel(String.valueOf((float)value)));
        }

        axisY.setValues(axisValuesY);
    }

    /**
     * Clears the values of the chart, resets the maximum and minimum values of the x and y axes, and sets the chart data to an empty state.
     */
    public void clear(){
        this.values.clear();
        maxX=0; minX=-1; maxY=0; minY=0;
        chartView.setLineChartData(data);
    }

    /**
     Set the horizontal (X) axis labels for the chart
     */
    public Line getLine(){
        return this.lines.get(0);
    }

    private boolean isLeft = true;
    /**
     Set the integer values for the vertical (Y) axis labels for the chart
     @param isLeft the number of labels to display on the axis
     */
    public void setAxisYSide(boolean isLeft){
        this.isLeft = isLeft;
    }

    /**
     Set the name of the X axis
     @param name The name to be displayed for the X axis
     */
    public void setXAxisName(String name){
        this.axisX.setName(name);
    }

    /**
     Set the name of the Y axis
     @param name The name to be displayed for the Y axis
     */
    public void setYAxisName(String name){
        this.axisY.setName(name);
    }

    /**
     Set the horizontal (X) axis labels for the chart
     */
    public void draw(){
        this.data.setAxisXBottom(axisX);

        if(this.isLeft)
            this.data.setAxisYLeft(axisY);
        else
            this.data.setAxisYRight(axisY);

        chartView.setLineChartData(data);
    }
}
